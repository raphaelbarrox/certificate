import { type NextRequest, NextResponse } from "next/server"
import { EmailService } from "@/lib/email-providers/email-service"
import { getDecryptedConfigAction } from "@/app/actions/email-actions"

export const runtime = "nodejs"

function getErrorSuggestion(errorCode?: string, errorMessage?: string): string {
  const lowerCaseMessage = errorMessage?.toLowerCase() || ""

  if (lowerCaseMessage.includes("invalid login") || lowerCaseMessage.includes("authentication failed")) {
    return "Autentica√ß√£o falhou. Verifique usu√°rio e senha. Para servi√ßos como Gmail ou Outlook, pode ser necess√°rio criar uma 'Senha de Aplicativo'."
  }
  if (lowerCaseMessage.includes("api key") || lowerCaseMessage.includes("unauthorized")) {
    return "API Key inv√°lida. Verifique se a API Key do Resend est√° correta e ativa."
  }
  if (errorCode === "ENOTFOUND") {
    return "Servidor n√£o encontrado. Verifique o endere√ßo do servidor SMTP."
  }
  if (errorCode === "ECONNREFUSED") {
    return "Conex√£o recusada. Verifique o endere√ßo do servidor e a porta. A porta pode estar bloqueada por um firewall."
  }
  if (errorCode === "ETIMEDOUT") {
    return "Tempo de conex√£o esgotado. O servidor pode estar offline ou a porta bloqueada."
  }
  if (lowerCaseMessage.includes("ssl") || lowerCaseMessage.includes("tls")) {
    return "Erro de SSL/TLS. Tente alternar a op√ß√£o 'Usar TLS/SSL' ou verifique se a porta est√° correta (ex: 465 para SSL, 587 para TLS)."
  }
  return "Ocorreu um erro inesperado. Verifique todas as configura√ß√µes e tente novamente."
}

export async function POST(request: NextRequest) {
  try {
    const { action, config, userId } = await request.json()

    console.log("[v0] [Email Test API] üöÄ Iniciando teste:", {
      action,
      provider: config?.provider,
      hasUserId: !!userId,
    })

    if (!config) {
      console.log("[v0] [Email Test API] ‚ùå Configura√ß√£o ausente")
      return NextResponse.json({ error: "Configura√ß√£o de email ausente." }, { status: 400 })
    }

    const hasSecureKey = config.resend?.keyHash
    const hasLegacyKey = config.resend?.apiKey && config.resend.apiKey.trim() !== ""

    if (!hasSecureKey && !hasLegacyKey) {
      console.log("[v0] [Email Test API] ‚ùå API Key ausente")
      return NextResponse.json(
        {
          error: "API Key do Resend √© obrigat√≥ria. Configure e salve sua API Key primeiro.",
        },
        { status: 400 },
      )
    }

    let finalConfig = config

    if (hasSecureKey) {
      if (!userId) {
        console.log("[v0] [Email Test API] ‚ùå UserId necess√°rio para descriptografar")
        return NextResponse.json(
          {
            error: "Erro de autentica√ß√£o. Fa√ßa login novamente.",
          },
          { status: 401 },
        )
      }

      try {
        console.log("[v0] [Email Test API] üîì Descriptografando API Key...")
        const decryptResult = await getDecryptedConfigAction(userId, config.resend.keyHash)

        if (!decryptResult.success) {
          throw new Error(decryptResult.error)
        }

        finalConfig = {
          ...config,
          resend: {
            enabled: true,
            apiKey: decryptResult.apiKey,
          },
        }
        console.log("[v0] [Email Test API] ‚úÖ API Key descriptografada com sucesso")
      } catch (decryptError) {
        console.error("[v0] [Email Test API] ‚ùå Erro ao descriptografar:", decryptError)
        return NextResponse.json(
          {
            error: "Erro ao acessar API Key. Verifique se a chave foi salva corretamente.",
          },
          { status: 400 },
        )
      }
    }

    const apiKey = finalConfig.resend?.apiKey
    if (!apiKey || !apiKey.startsWith("re_")) {
      console.log("[v0] [Email Test API] ‚ùå API Key formato inv√°lido")
      return NextResponse.json(
        {
          error: "API Key do Resend deve come√ßar com 're_'. Verifique se copiou corretamente da dashboard do Resend.",
        },
        { status: 400 },
      )
    }

    const { senderEmail, senderName } = finalConfig

    if (!senderEmail || senderEmail.trim() === "") {
      console.log("[v0] [Email Test API] ‚ùå Email remetente ausente")
      return NextResponse.json(
        {
          error: "Email do remetente √© obrigat√≥rio para o Resend.",
        },
        { status: 400 },
      )
    }

    const emailDomain = senderEmail.split("@")[1]?.toLowerCase()
    const publicDomains = ["gmail.com", "yahoo.com", "hotmail.com", "outlook.com", "live.com", "icloud.com", "aol.com"]

    if (publicDomains.includes(emailDomain)) {
      console.log("[v0] [Email Test API] ‚ùå Dom√≠nio p√∫blico detectado:", emailDomain)
      return NextResponse.json(
        {
          error: `Resend n√£o permite emails de provedores p√∫blicos como ${emailDomain}. Voc√™ precisa usar um dom√≠nio pr√≥prio verificado no Resend (ex: contato@suaempresa.com).`,
        },
        { status: 400 },
      )
    }

    const emailConfig = {
      ...finalConfig,
      provider: "resend",
      resend: {
        enabled: true,
        apiKey: apiKey,
      },
    }

    if (action === "verify") {
      console.log("[v0] [Email Test API] üîç Testando conex√£o...")
      const result = await EmailService.testConnection(emailConfig)

      if (!result.success) {
        let errorMessage = result.error || "Falha na verifica√ß√£o"
        console.log("[v0] [Email Test API] ‚ùå Falha na verifica√ß√£o:", errorMessage)

        if (errorMessage.includes("401") || errorMessage.includes("unauthorized")) {
          errorMessage =
            "API Key do Resend inv√°lida ou expirada. Verifique se a chave est√° correta e ativa na dashboard do Resend."
        } else if (errorMessage.includes("403") || errorMessage.includes("forbidden")) {
          errorMessage = "Acesso negado. Verifique se a API Key tem as permiss√µes necess√°rias para enviar emails."
        } else if (errorMessage.includes("domain")) {
          errorMessage = `Dom√≠nio '${emailDomain}' n√£o est√° verificado no Resend. Acesse https://resend.com/domains para verificar seu dom√≠nio.`
        }

        return NextResponse.json({ error: errorMessage }, { status: 400 })
      }

      console.log("[v0] [Email Test API] ‚úÖ Conex√£o verificada com sucesso")
      return NextResponse.json({
        message: `‚úÖ Conex√£o com Resend bem-sucedida! API Key v√°lida e dom√≠nio '${emailDomain}' verificado.`,
      })
    }

    if (action === "send") {
      console.log("[v0] [Email Test API] üìß Enviando email de teste...")

      const result = await EmailService.sendEmail({
        to: senderEmail,
        subject: "‚úÖ Teste de Conex√£o - CertGen",
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
            <h1 style="color: #10b981;">üéâ Teste de Conex√£o Resend</h1>
            <p>Se voc√™ recebeu este email, suas configura√ß√µes est√£o funcionando <strong>perfeitamente</strong>!</p>
            
            <div style="background: #f3f4f6; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <h3 style="margin: 0 0 10px 0; color: #374151;">üìã Detalhes da Configura√ß√£o:</h3>
              <p><strong>üöÄ Provedor:</strong> Resend API</p>
              <p><strong>üìß Email Remetente:</strong> ${senderEmail}</p>
              <p><strong>üë§ Nome Remetente:</strong> ${senderName || "N√£o definido"}</p>
              <p><strong>üåê Dom√≠nio:</strong> ${emailDomain}</p>
              <p><strong>‚úÖ Status:</strong> Dom√≠nio verificado e funcionando</p>
              <p><strong>üîê Seguran√ßa:</strong> API Key criptografada</p>
            </div>
            
            <p style="color: #6b7280; font-size: 14px;">
              Agora voc√™ pode ativar o envio autom√°tico de certificados com confian√ßa! üéØ
            </p>
          </div>
        `,
        config: emailConfig,
      })

      if (!result.success) {
        let errorMessage = result.error || "Falha no envio do teste"
        console.log("[v0] [Email Test API] ‚ùå Falha no envio:", errorMessage)

        if (errorMessage.includes("domain")) {
          errorMessage = `‚ùå Dom√≠nio '${emailDomain}' n√£o est√° verificado no Resend. Acesse https://resend.com/domains para verificar seu dom√≠nio antes de enviar emails.`
        } else if (errorMessage.includes("rate limit")) {
          errorMessage = "‚ùå Limite de envio excedido. Aguarde alguns minutos antes de tentar novamente."
        }

        return NextResponse.json({ error: errorMessage }, { status: 400 })
      }

      console.log("[v0] [Email Test API] ‚úÖ Email de teste enviado com sucesso")
      return NextResponse.json({
        message: `üéâ Email de teste enviado com sucesso para ${senderEmail}! Verifique sua caixa de entrada (e spam).`,
      })
    }

    return NextResponse.json({ error: "A√ß√£o inv√°lida. Use 'verify' ou 'send'." }, { status: 400 })
  } catch (error: any) {
    console.error("‚ùå [Email Test API Error]", error)

    let errorMessage = "Erro interno do servidor"
    let suggestion = ""

    if (error instanceof Error) {
      errorMessage = error.message

      if (error.message.includes("domain")) {
        suggestion = "Configure seu dom√≠nio no Resend: https://resend.com/domains"
      } else if (error.message.includes("unauthorized") || error.message.includes("401")) {
        suggestion = "Verifique se a API Key est√° correta e ativa no Resend"
      } else if (error.message.includes("JSON")) {
        errorMessage = "Erro ao processar dados da requisi√ß√£o"
      } else if (error.message.includes("fetch")) {
        errorMessage = "Erro de conex√£o com o servi√ßo de email"
      }
    }

    const finalErrorMessage = `‚ùå ${errorMessage}${suggestion ? ` | üí° ${suggestion}` : ""}`

    return NextResponse.json(
      { error: finalErrorMessage },
      {
        status: 500,
        headers: {
          "Content-Type": "application/json",
        },
      },
    )
  }
}
