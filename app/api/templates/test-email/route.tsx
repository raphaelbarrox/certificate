import { type NextRequest, NextResponse } from "next/server"
import { EmailService } from "@/lib/email-providers/email-service"

export const runtime = "nodejs"

function getErrorSuggestion(errorCode?: string, errorMessage?: string): string {
  const lowerCaseMessage = errorMessage?.toLowerCase() || ""

  if (lowerCaseMessage.includes("invalid login") || lowerCaseMessage.includes("authentication failed")) {
    return "Autentica√ß√£o falhou. Verifique usu√°rio e senha. Para servi√ßos como Gmail ou Outlook, pode ser necess√°rio criar uma 'Senha de Aplicativo'."
  }
  if (lowerCaseMessage.includes("api key") || lowerCaseMessage.includes("unauthorized")) {
    return "API Key inv√°lida. Verifique se a API Key do Resend est√° correta e ativa."
  }
  if (errorCode === "ENOTFOUND") {
    return "Servidor n√£o encontrado. Verifique o endere√ßo do servidor SMTP."
  }
  if (errorCode === "ECONNREFUSED") {
    return "Conex√£o recusada. Verifique o endere√ßo do servidor e a porta. A porta pode estar bloqueada por um firewall."
  }
  if (errorCode === "ETIMEDOUT") {
    return "Tempo de conex√£o esgotado. O servidor pode estar offline ou a porta bloqueada."
  }
  if (lowerCaseMessage.includes("ssl") || lowerCaseMessage.includes("tls")) {
    return "Erro de SSL/TLS. Tente alternar a op√ß√£o 'Usar TLS/SSL' ou verifique se a porta est√° correta (ex: 465 para SSL, 587 para TLS)."
  }
  return "Ocorreu um erro inesperado. Verifique todas as configura√ß√µes e tente novamente."
}

export async function POST(request: NextRequest) {
  try {
    const { action, config } = await request.json()

    if (!config) {
      return NextResponse.json({ error: "Configura√ß√£o de email ausente." }, { status: 400 })
    }

    const { senderEmail, senderName } = config

    // For√ßar provider para resend
    config.provider = "resend"

    if (!config.resend?.apiKey) {
      return NextResponse.json(
        {
          error: "API Key do Resend √© obrigat√≥ria.",
        },
        { status: 400 },
      )
    }

    if (!config.resend.apiKey.startsWith("re_")) {
      return NextResponse.json(
        {
          error: "API Key do Resend deve come√ßar com 're_'. Verifique se copiou corretamente.",
        },
        { status: 400 },
      )
    }

    if (!senderEmail) {
      return NextResponse.json(
        {
          error: "Email do remetente √© obrigat√≥rio para o Resend.",
        },
        { status: 400 },
      )
    }

    // Verificar se o dom√≠nio do email parece ser personalizado
    const emailDomain = senderEmail.split("@")[1]
    if (["gmail.com", "yahoo.com", "hotmail.com", "outlook.com"].includes(emailDomain)) {
      return NextResponse.json(
        {
          error: `Resend n√£o permite emails de provedores p√∫blicos como ${emailDomain}. Use um dom√≠nio pr√≥prio verificado no Resend.`,
        },
        { status: 400 },
      )
    }

    if (action === "verify") {
      const result = await EmailService.testConnection(config)

      if (!result.success) {
        let errorMessage = result.error || "Falha na verifica√ß√£o"

        if (errorMessage.includes("401") || errorMessage.includes("unauthorized")) {
          errorMessage = "API Key do Resend inv√°lida. Verifique se a chave est√° correta e ativa."
        } else if (errorMessage.includes("domain")) {
          errorMessage = "Dom√≠nio n√£o verificado no Resend. Acesse resend.com/domains para verificar seu dom√≠nio."
        } else if (errorMessage.includes("forbidden")) {
          errorMessage = "Email remetente n√£o autorizado. Certifique-se de que o dom√≠nio est√° verificado no Resend."
        }

        throw new Error(errorMessage)
      }

      return NextResponse.json({
        message: `‚úÖ Conex√£o com Resend bem-sucedida! Configura√ß√£o v√°lida.`,
      })
    }

    if (action === "send") {
      if (!senderEmail) {
        return NextResponse.json({ error: "Email do remetente √© obrigat√≥rio para enviar um teste." }, { status: 400 })
      }

      const result = await EmailService.sendEmail({
        to: senderEmail,
        subject: "‚úÖ Teste de Conex√£o - CertGen",
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
            <h1 style="color: #10b981;">üéâ Teste de Conex√£o Resend</h1>
            <p>Se voc√™ recebeu este email, suas configura√ß√µes est√£o funcionando <strong>perfeitamente</strong>!</p>
            
            <div style="background: #f3f4f6; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <h3 style="margin: 0 0 10px 0; color: #374151;">üìã Detalhes da Configura√ß√£o:</h3>
              <p><strong>üöÄ Provedor:</strong> Resend API</p>
              <p><strong>üìß Email Remetente:</strong> ${senderEmail}</p>
              <p><strong>‚úÖ Status:</strong> Dom√≠nio verificado e funcionando</p>
            </div>
            
            <p style="color: #6b7280; font-size: 14px;">
              Agora voc√™ pode ativar o envio autom√°tico de certificados com confian√ßa! üéØ
            </p>
          </div>
        `,
        config,
      })

      if (!result.success) {
        let errorMessage = result.error || "Falha no envio do teste"

        if (errorMessage.includes("domain")) {
          errorMessage =
            "‚ùå Dom√≠nio n√£o verificado no Resend. Acesse https://resend.com/domains para verificar seu dom√≠nio antes de enviar emails."
        }

        throw new Error(errorMessage)
      }

      return NextResponse.json({
        message: `üéâ Email de teste enviado com sucesso para ${senderEmail}! Verifique sua caixa de entrada.`,
      })
    }

    return NextResponse.json({ error: "A√ß√£o inv√°lida." }, { status: 400 })
  } catch (error: any) {
    console.error("‚ùå [Email Test Error]", error)

    let suggestion = ""
    if (error.message.includes("domain")) {
      suggestion = "Configure seu dom√≠nio no Resend: https://resend.com/domains"
    } else if (error.message.includes("unauthorized") || error.message.includes("401")) {
      suggestion = "Verifique se a API Key est√° correta e ativa no Resend"
    }

    const errorMessage = `‚ùå ${error.message}${suggestion ? ` | üí° ${suggestion}` : ""}`
    return NextResponse.json({ error: errorMessage }, { status: 500 })
  }
}
